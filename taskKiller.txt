================================================================================
    何に何分かかったか記録するソフトを書いてみる
================================================================================

[完了] .git ディレクトリーなどを非表示にする
[完了] ソリューションを作成
[完了] レポジトリーを作成
[完了] プロパティーをチェック
[完了] 名前を決める
[完了] .gitignore を作る
[完了] レポジトリーをクローン
[完了] 全てのファイルをチェック
[完了] いったんコミット（繰り返す）
[完了] メモ

    何をするか書き、開始ボタンを押す。それだけやって終わったなら終了ボタンまたは次のタスクを書いて開始ボタンを押し、グダグダになったならその旨を記録するボタンを押す。どのくらい集中できているかが分かる。また、タスクのカテゴリーを設定できれば、どういうことにトータル何分かけたかも分かる。

    --------------------------------------------------------------------------------

    タスク管理はそれなりにできている。自分の問題は、職場で働いているとか、上司への報告があるとかではないことにより、ちょっと何か他のことに興味を持ったり、ちょっとメールを書こうと思ったりにより、そのことに没頭し、一気に何時間もかけてしまうこと。脱線が激しく、すぐに復旧しない。そのため、自分の時間の使い方を見える化してみるのは効果的かもしれない。レコーディングダイエットのようなこと。

    --------------------------------------------------------------------------------

    ログの例:

    ○年○月○日

    ○時○分
        タスク1

    ○時○分
        タスク2
        タスク3

    ○時○分
        タスク4
        グダグダ

    ○時○分
        不詳

    何かを始め、それだけやり、次のタスクに移行したなら、タスク1のようになる。

    何かを始め、ついでに他のこともやったなら、「今やっていること」のところにそのことを書き足して確定したい。

    何かを始め、途中で子供と遊ぶことになったなどでグダグダになれば、また仕事に戻れてそれが終わったときに「終わったが、それだけに集中できたわけでない」を入れたい。そうでないと、その作業への所要時間がおかしくなる。

    タスク4が終わり、いったん飯だとかで机を離れるときには、次のタスクを指定せず「終了」ボタンを押す。その場合、それからの時間は不詳扱いになる。

    --------------------------------------------------------------------------------

    土日連続で子供とプールに行き、昨日（日曜）の晩は、運動でアドレナリンが出たのか、頭は覚醒しているのに回転が悪く、興奮状態にあるのに思考力がないという変な状態だった。その状態で友達にメールを書き始めては、全く聞かれていないことまで、ただ自分がそういう話を久々に書いてみると楽しいということだけで書き、気付けば2時間くらい経っていた。12時くらいになって「ん？ 何を書いているのか」と思って読み返しては、送る必要の全くない独り言だったので消した。

    自分は没頭しやすい。それはそれで強みだが、「2時間もメールを書いて結局送らない」というのは生産性がゼロである。とにかくそういう無駄を省いていきたい。

    --------------------------------------------------------------------------------

    そういう無駄を省くことが主目的なので、たとえばメールの送り先を事前登録しておいて誰に今週は何分かけたかを分析するなどは考えない。そこまですると管理コストが高まるし、グダグダが入るとデータとしての有用性が著しく低くなるため。「ちょっとメールを書いたついでに、途中で思い出したので必要なものをアマゾンで探し、他にも必要なものを思い出して買おうとしたが、情報が足りなかったのでググり、そのついでに他のことも調べた」などの全てがそのメールの所要時間となることに寛容なソフト。

    --------------------------------------------------------------------------------

    あとで「○○さんにメールを書いたときに△△もやった」と思い出すことがあるだろう。しかし、それをあとから追記できるようにすることが、今、目の前の時間の使い方の見直しに大きく貢献するとは思えない。日報を作って提出したいわけでないし、それで成果報酬額が決まるわけでもない。「だいたい何にどのくらいの時間を」というのをゆるくチェックし、グダグダを減らしたいだけ。

    --------------------------------------------------------------------------------

    mNextTasks
    mStartNextTasks
    mCurrentTasks
    mIsFocusless → mIsDisoriented
    mEndCurrentTasks
    mPreviousTasks
    mClose

    --------------------------------------------------------------------------------

    今のタスクに既にどのくらいの時間がかかっているかの表示をいったん見送る。必要ならすぐに追加できる。所要時間が見えた方が「時間をかけすぎている」と焦り、早く切り上げられる可能性があるが、逆に「まだこの程度か」と思う可能性もある。見えないからこそ急ぐこともあるか。

    --------------------------------------------------------------------------------

    先に Nekote に入れてライブラリー化してから使いたいコードが多いが、全てベタ書きしている。すぐに使いたいプログラムだし、Nekote に本当に必要なものは何か、まず Nekote なしでプログラムを書くことで考えたいため。

    --------------------------------------------------------------------------------

    所要時間の表示を見送ると書いたが、サクッと実装した。「今のタスク」のところにタスクが表示されるだけでは実行中の印象が弱かったため。

    --------------------------------------------------------------------------------

    基本的な機能が一通り揃い、使えるようになったので、ここからはタスクリストで完成度を高めていく。

[完了] 「メモ」タスクを完了にする
[完了] taskKiller のログを更新（繰り返す）
[完了] [7/22] いったんコミット（繰り返す）
[完了] Logs.txt のロード時に問題があった場合にメッセージを表示
[完了] 経過時間をタイトルバーに表示
[完了] 既存のコードを全体的にチェック
[完了] 全ての必要なメソッドで iUpdateControls が呼ばれているようにする
[完了] 落ちるところがないようにする
[完了] Closed でコントロールの内容を取得するのが安全か調べる
[完了] ログの追加時にリストを先頭にスクロールする
[完了] Logs.txt を timeLogs.txt に変更

    一意性があった方が他ディレクトリーに移動しやすい。

[却下] 多言語化
[完了] コントロールの状態の変化をテスト
[完了] ログの削除をボタンおよびキーで可能にする
[完了] マルチスレッドでコリジョンが発生しないのを確認
[完了] 時差やロケールが影響しないのを確認
[完了] Closing イベントを消す

    いつでも閉じることができてよい。開けば全て戻るように。

[完了] 全ての MessageBox の表示のコードをチェック
[完了] リストアされた情報に応じて Loaded でフォーカスを設定

    常に mNextTasks でよさそう。

[完了] シンプルな KVS 的なものを作る
[完了] プログラムの異常終了時にも状態が戻るようにする

    コントロールが操作された瞬間にセッション情報が保存されるようにした。

[完了] ソフトや Windows の再起動をしても現行のタスクなどが戻るようにする
[完了] KVS の文字のエスケープなどをテスト
[完了] 起動時に IME をオンにする
[完了] コメント
[完了] 実装
[完了] テスト
