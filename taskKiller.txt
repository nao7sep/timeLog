================================================================================
    何に何分かかったか記録するソフトを書いてみる
================================================================================

[完了] .git ディレクトリーなどを非表示にする
[完了] ソリューションを作成
[完了] レポジトリーを作成
[完了] プロパティーをチェック
[完了] 名前を決める
[完了] .gitignore を作る
[完了] レポジトリーをクローン
[完了] 全てのファイルをチェック
[完了] いったんコミット（繰り返す）
[完了] メモ

    何をするか書き、開始ボタンを押す。それだけやって終わったなら終了ボタンまたは次のタスクを書いて開始ボタンを押し、グダグダになったならその旨を記録するボタンを押す。どのくらい集中できているかが分かる。また、タスクのカテゴリーを設定できれば、どういうことにトータル何分かけたかも分かる。

    --------------------------------------------------------------------------------

    ログの例:

    ○年○月○日

    ○時○分
        タスク1

    ○時○分
        タスク2
        タスク3

    ○時○分
        タスク4
        グダグダ

    ○時○分
        不詳

    何かを始め、それだけやり、次のタスクに移行したなら、タスク1のようになる。

    何かを始め、ついでに他のこともやったなら、「今やっていること」のところにそのことを書き足して確定したい。

    何かを始め、途中で子供と遊ぶことになったなどでグダグダになれば、また仕事に戻れてそれが終わったときに「終わったが、それだけに集中できたわけでない」を入れたい。そうでないと、その作業への所要時間がおかしくなる。

    タスク4が終わり、いったん飯だとかで机を離れるときには、次のタスクを指定せず「終了」ボタンを押す。その場合、それからの時間は不詳扱いになる。

    --------------------------------------------------------------------------------

    今のタスクに既にどのくらいの時間がかかっているかの表示をいったん見送る。必要ならすぐに追加できる。所要時間が見えた方が「時間をかけすぎている」と焦り、早く切り上げられる可能性があるが、逆に「まだこの程度か」と思う可能性もある。見えないからこそ急ぐこともあるか。

    --------------------------------------------------------------------------------

    先に Nekote に入れてライブラリー化してから使いたいコードが多いが、全てベタ書きしている。すぐに使いたいプログラムだし、Nekote に本当に必要なものは何か、まず Nekote なしでプログラムを書くことで考えたいため。

    --------------------------------------------------------------------------------

    所要時間の表示を見送ると書いたが、サクッと実装した。「今のタスク」のところにタスクが表示されるだけでは実行中の印象が弱かったため。

    --------------------------------------------------------------------------------

    基本的な機能が一通り揃い、使えるようになったので、ここからはタスクリストで完成度を高めていく。

[完了] taskKiller のログを更新（繰り返す）
[完了] [7/22] いったんコミット（繰り返す）
[完了] Logs.txt のロード時に問題があった場合にメッセージを表示
[完了] 経過時間をタイトルバーに表示
[完了] 全ての必要なメソッドで iUpdateControls が呼ばれているようにする
[完了] 落ちるところがないようにする
[完了] Closed でコントロールの内容を取得するのが安全か調べる
[完了] ログの追加時にリストを先頭にスクロールする
[完了] Logs.txt を timeLogs.txt に変更

    一意性があった方が他ディレクトリーに移動しやすい。

[却下] 多言語化
[完了] コントロールの状態の変化をテスト
[完了] ログの削除をボタンおよびキーで可能にする
[完了] マルチスレッドでコリジョンが発生しないのを確認
[完了] 時差やロケールが影響しないのを確認
[完了] Closing イベントを消す

    いつでも閉じることができてよい。開けば全て戻るように。

[完了] 全ての MessageBox の表示のコードをチェック
[完了] リストアされた情報に応じて Loaded でフォーカスを設定

    常に mNextTasks でよさそう。

[完了] シンプルな KVS 的なものを作る
[完了] プログラムの異常終了時にも状態が戻るようにする

    コントロールが操作された瞬間にセッション情報が保存されるようにした。

[完了] ソフトや Windows の再起動をしても現行のタスクなどが戻るようにする
[完了] KVS の文字のエスケープなどをテスト
[完了] 起動時に IME をオンにする
[完了] コメント
[完了] 実装
[完了] テスト
[完了] [7/27] taskKiller のログを更新（繰り返す）
[完了] [7/27] いったんコミット（繰り返す）
[完了] 仮のバイナリーを配置
[完了] アセンブリー情報を設定
[完了] コードを全体的にチェック
[完了] 投げる例外クラスを見直す

    Nekote の開発を少し進めたので、一応、整合させておく。

[完了] *Safe を *Safely に改名

    これも Nekote の開発により仕様が定まったため。

[却下] 作業の中断に対応できるようにする

    やめておく。

    「ちょっとトイレ」くらいなら数分だし、プログラムの操作を忘れて行くことも多い。「子どもが急に泣きだした」なら、プログラムの操作について考えることすらなく駆けつける。急な来客だったり、奥さんが声を掛けてきたりでも、「中断」ボタンを押すことはまず思いつかない。

    職場で集中していても日常的に発生する程度の頻度や長さの割り込みは「グダグダ」とみなすほどのことでないと考えるのが現実的。

    「グダグダ」をつけるのは、メールを書くだけのつもりだったのにアマゾンを開き、既に持っているものをチェックするために物置を見に行き、他のものを見つけ、そのメンテナンスのためにサビ取りを探し……などの、もっとガッツリと脱線した場合を想定。

[完了] iPreviousLogs を internal static にする

    internal だと XAML での WPF のコントロールとのバインディング時にコンパイラーがエラーを吐く「ことがある」という記憶があって public にしたが、今のところ再現していない。

[完了] MainWindow から静的プロパティーにアクセスする仕様について再考

    単一ウィンドウ・単一機能のプログラムなので、iPreviousLogs を作り、静的プロパティーなどを入れた。App.xaml.cs でデータのロードや保存の処理が必要になると思い、MainWindow 内の static でないプロパティーなどにデータを入れるのでは App.xaml.cs との受け渡しが面倒になりそうと思ったため。

    しかし、その後、

    ItemsSource="{Binding Source={x:Static local:iPreviousLogs.Logs}}"

    が突然コンパイル不可になった。

    MainWindow に static でないプロパティーを用意し、ElementName と Path でバインディングしたところコンパイルできた。

    MainWindow は、名前からも、基本的には一つだけ開かれるものだが、そうであっても単一プロセスで複数が同時に開かれても問題ないような設計を心掛けるべきなのだろう。

    入力画面を複数開けるプログラムなどでは当然そうしていたが、単一ウィンドウ・単一機能のプログラムでは手を抜く癖ができてしまっていた。

    timeLog を今後大きく変更する可能性が低いので、iPreviousLogs はそのまま。直すのがめんどくさいし、他にしなければならないことが多数あり、それらに取り組んだ方が生産的。設計を見直さないことにより派生開発のコストが増大するリスクはない。

[完了] DataContext について調べる

    WPF をちゃんとやったことがない。今さら、自分がバインディングについてほとんど理解していないと知った。

    --------------------------------------------------------------------------------

    Using the DataContext - The complete WPF tutorial
    https://www.wpf-tutorial.com/data-binding/using-the-datacontext/

    次のページによると、The purpose of other binding sources (RelativeSource, ElementName, etc) is to point to another property that doesn't exist in the current control's DataContext とのこと。

    wpf - What is DataContext for? - Stack Overflow
    https://stackoverflow.com/questions/7262137/what-is-datacontext-for

[完了] Binding における Source/RelativeSource と ElementName の違いを調べる

    RelativeSource は、親など、自分から見て相対的な関係にあるものとのバインディングに使われる。背景色を親と同じにするなど。

    RelativeSources in WPF
    https://www.c-sharpcorner.com/UploadFile/yougerthen/relativesources-in-wpf/

    RelativeSource MarkupExtension - WPF .NET Framework | Microsoft Docs
    https://docs.microsoft.com/en-us/dotnet/desktop/wpf/advanced/relativesource-markupextension

    --------------------------------------------------------------------------------

    DynamicResource と StaticResource についても読んだ。リソースデータの取得を実行時に試みるか、コンパイル時にそれが可能なことを確認するかの違い。

    DynamicResource Markup Extension - WPF .NET Framework | Microsoft Docs
    https://docs.microsoft.com/en-us/dotnet/desktop/wpf/advanced/dynamicresource-markup-extension

    StaticResource Markup Extension - WPF .NET Framework | Microsoft Docs
    https://docs.microsoft.com/en-us/dotnet/desktop/wpf/advanced/staticresource-markup-extension

    --------------------------------------------------------------------------------

    ElementName での検索は、VisualTree を必要とし、VisualTree における上下移動による要素の検索として行われる。

    wpf - What is the difference between x:Reference and ElementName? - Stack Overflow
    https://stackoverflow.com/questions/19244111/what-is-the-difference-between-xreference-and-elementname

    --------------------------------------------------------------------------------

    ContentElement を継承するものは VisualTree に含まれないとのこと。

    Understanding the Visual Tree and Logical Tree in WPF - CodeProject
    https://www.codeproject.com/Articles/21495/Understanding-the-Visual-Tree-and-Logical-Tree-in

    --------------------------------------------------------------------------------

    Source, RelativeSource, ElementName の違いについては、次のページがドンピシャ。

    How to: Specify the Binding Source - WPF .NET Framework | Microsoft Docs
    https://docs.microsoft.com/en-us/dotnet/desktop/wpf/data/how-to-specify-the-binding-source

    Source は、DataContext の設定によりスコープを設定することなく、特定のインスタンス化されたものにバインディングするためのもの。

    RelativeSource は、先ほど書いたメモの内容でいい。

    ElementName は、VisualTree における上下の移動で見つかる他の要素のプロパティーにバインディングするためのもの。

    RelativeSource では、

    Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors)/ErrorContent}" とか、

    Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Value}" とかの書き方がある。

    RelativeSource Class (System.Windows.Data) | Microsoft Docs
    https://docs.microsoft.com/en-us/dotnet/api/system.windows.data.relativesource

    Binding RelativeSource= ... の部分を Binding Source= ... に変更するといかなる書き方でも動かないのかと考えると、今の自分には分からない。

    とりあえず、RelativeSource は、Binding RelativeSource= ... のあとにも RelativeSource を書くような状況で使うものと考えておく。Binding 直後の RelativeSource により「上へ下へ検索するモードでお願いしまっせ」を言い、実際どう検索するかを = 以降に書くものと。

    Source と ElementName の使い分けや可換性についてはまだ弱いので、もう少し調べる。

    --------------------------------------------------------------------------------

    MainWindow に

    private ObservableCollection <LogInfo> Hoge => iPreviousLogs.Logs;

    と書いたところ、

    ItemsSource="{Binding Source={x:Reference Name=mWindow}, Path=Hoge}"

    は起動すらせず、

    ItemsSource="{Binding ElementName=mWindow, Path=Hoge}"

    は起動には成功したものの、その後の処理でエラーが発生した。

    追記: 古いセッション情報が残っていてのエラーのようで、それを消してからの起動なら、後者の書き方はうまく動く。

    --------------------------------------------------------------------------------

    いろいろ調べたが、Source, RelativeSource, ElementName それぞれに「この状況だと、これしか使えない」というのがあるわけではなさそう。速度の比較も見られる。暫定的に、「したいことができれば、どれを使ってもよい」と考えることにする。

    第5回 WPFの「データ・バインディング」を理解する：連載：WPF入門（2/3 ページ） - ＠IT
    https://atmarkit.itmedia.co.jp/ait/articles/1010/08/news123_2.html

    wpf - ElementName vs. RelativeResource? - Stack Overflow
    https://stackoverflow.com/questions/4317097/elementname-vs-relativeresource

[完了] ListBox の ItemsSource がエラーを吐くようになったのを修正

    前回は次のコードでコンパイルできていた。それが急にできなくなった。

    ItemsSource="{Binding Source={x:Static local:iPreviousLogs.Logs}}"

    エラーメッセージ:

    型 'iPreviousLogs' が見つかりません。型名では大文字と小文字が区別されることに注意してください。

    --------------------------------------------------------------------------------

    DataContext について多少は理解した上、Logs 内の何かとバインディングするわけでないため意味がないと知りつつも

    DataContext="{x:Static local:iPreviousLogs.Logs}"

    と書いてみたところ、こちらでも型が見つからないというエラーが出た。

    --------------------------------------------------------------------------------

    MainWindow に

    private ObservableCollection <LogInfo> Hoge => iPreviousLogs.Logs;

    を追記し、いくつか試した。

    * ItemsSource="{Binding Source={x:Reference Name=mWindow}, Path=Hoge}" → 起動に失敗
    * ItemsSource="{Binding ElementName=mWindow, Path=Hoge}" → 起動に成功し、データが表示され、ログの追加に成功
    * ItemsSource="{Binding Path=Hoge}" → 起動に成功するが、データが表示されず、同じキーが2回追加されるエラー

    三つ目に

    <ListBox.DataContext>
        <Binding ElementName="mWindow" />
    </ListBox.DataContext>

    を追記すると、二つ目と同様に成功。

    それは、

    DataContext="{Binding ElementName=mWindow}" ItemsSource="{Binding Path=Hoge}"

    でも同じ。

    --------------------------------------------------------------------------------

    XAML でのバインディングをやめ、mWindow_Loaded に

    mPreviousTasks.ItemsSource = iPreviousLogs.Logs;

    を書くと、Hoge なしでも動く。

    となると、

    * Visual Studio では、静的プロパティーは、XAML のプレビュー時にはインスタンス化されて中身まで詰められるが、コンパイル時にはそこまでされない
    * そこまでされないため、ItemsSource にバインディングできるものとコンパイラーが正しく判断できず、（おそらくバグにより）型が見つからないというエラーになる
    * mWindow_Loaded での設定は、XAML の関与しない、型の一致のみ調べられることなのでコンパイルが通り、実行時には静的プロパティーに中身が詰まっているため動く

    という仮説が立つ。

    1週間ほど前にはコンパイルできていたコードが、ただ Visual Studio を閉じて、しばらくしてまた開いただけでコンパイル不可になったので、x:Static によるコードは、（インスタンス化される MainWindow から静的プロパティーにアクセスする点において仕様がダメという点はあっても）文法的には正しく書けていて、ただ Visual Studio がバグっているだけと考えてよさそう。

    実際、調べると、全く同じ状況で、全く同じコードで静的プロパティーとバインディングさせる例を多数見る。

    --------------------------------------------------------------------------------

    最終的にどうするか。

    iPreviousLogs.Logs というのは、単一ウィンドウ・単一機能のプログラムにおいて最初は App.xaml.cs でデータのロードや保存を行おうと思っていたからこそデータの受け渡しの簡略化のために用意したもの。

    やはり設計としてベストでないと思うので今後は気をつけるが、実装としての問題はないため、今回はそのまま使いたい。

    そのため、さらに ObservableCollection を用意することのない、mWindow_Loaded での ItemsSource の設定を結論とする。

[完了] [7/27] いったんコミット（繰り返す）
[完了] フォントを変更できるようにする

    .NET Core の、JSON による機能を使うか、簡単な KVS を用意するか、オワコンの ConfigurationManager をあえて使ってみるかのうち、あえてオワコンでいく。

    他は、今は準備不足だったり実装がめんどくさかったりだし、今後は ConfigurationManager を使わないため、現行のプロジェクトにも一つくらいそれを使うものがあってほしい。

    --------------------------------------------------------------------------------

    mWindow_Loaded での大きさの設定では、既にウィンドウの表示位置が決まっていて、モニターからはみ出す可能性がある。

    コンストラクターだと、InitializeComponent のあとなら大丈夫そうだが、それでも、まだコントロールの大きさやフォントをさわるのは早い気もする。

    そのため、mWindow_Initialized で処理を行った。

[完了] それぞれの入力欄が縦に自動的に伸びるようにする
[完了] 経過時間のフォントサイズが自動的に調整されるようにする

    FormattedText のコンストラクターの一部が古くなっている。

    c# - FormattedText.FormttedText is obsolete. Use the PixelsPerDip override - Stack Overflow
    https://stackoverflow.com/questions/45765980/formattedtext-formttedtext-is-obsolete-use-the-pixelsperdip-override

    --------------------------------------------------------------------------------

    FormattedText で得られる「高さ」には複数ある。

    Extent は、見える一番上のドットから一番下のドットまで。Padding が明確な枠内で上下にセンタリングしての表示ならフォントによりアセンダーなどが異なることは問題にならないはずなので Extent を使う。

    FormattedText Class (System.Windows.Media) | Microsoft Docs
    https://docs.microsoft.com/en-us/dotnet/api/system.windows.media.formattedtext

    --------------------------------------------------------------------------------

    コントロールのコンテンツ部分の大きさの取得においては妥協する。

    TextBox は、内部に 2px の Padding を持つ。これを除去し、Text の左端を Border につけるには、Template を大きく変更することになる。

    TextBox Styles and Templates - WPF .NET Framework | Microsoft Docs
    https://docs.microsoft.com/en-us/dotnet/desktop/wpf/controls/textbox-styles-and-templates

    FrameworkElement.ActualWidth により実際の幅を得られるが、その全てが描画可能なエリアではない。

    FrameworkElement.ActualWidth Property (System.Windows) | Microsoft Docs
    https://docs.microsoft.com/en-us/dotnet/api/system.windows.frameworkelement.actualwidth

    おそらく、VisualTreeHelper を使って UI 要素をたどり、それぞれの Margin、Border の太さ、Padding などを合計すれば、描画可能でないエリアが得られる。そこから、描画可能なエリアの大きさも分かるだろう。

    しかし、経過時間の表示文字列を TextBox の枠線にぴったり内接させたいなどでないため、そこまでの作り込みは不要。

    --------------------------------------------------------------------------------

    フォントサイズを決めるにおいては「999時間59分」の大きさを調べる。

    タスクに100時間以上かかることがない。寝ている間も計測を続けるようなタスクは考えにくい。

    となると、あり得るのは、タスクを開始し、そのまま忘れてしまい、パソコンがスリープし、久々に開いたときに4日とちょっと以上が経過していた場合。この場合、「時間」が3桁になる。

    しかし、40日以上もスリープが続いて999時間を超えることはまずない。

    あったとしても、表示が乱れるだけであり、実害が発生しない。

    --------------------------------------------------------------------------------

    「高さ」に Extent を使うのをやめて、Height を使うようにした。

    VerticalContentAlignment が Center でも、フォントのアセンダーなどの部分の余白が上下に均等にはみ出てくれるわけでないようだから。

    つまり、「アセンダー + Extent ＋ ディセンダー」が ActualHeight より大きくなると、下にだけはみ出て、Extent 部分が、上下方向にセンタリングされた位置より下にズレる。

    --------------------------------------------------------------------------------

    Height を使う場合、それが ActualHeight と近似する値であるにおいて、実際には枠線の太さだったり内部的な（見えない）Padding があればそれに影響されたりも考えないといけないわけで、フォントがギリギリまで大きくなったときに上下方向のセンタリングがわずかにズレる可能性を考える必要がある。

    しかし、目視でテストした限りは大丈夫のようなので、しばらく様子見。

[完了] [8/2] いったんコミット（繰り返す）
[完了] [7/27] taskKiller のログを更新（繰り返す）
[完了] 仮のバイナリーと設定を更新
[完了] 価値の有無を区別できるようにする
[完了] 統計処理を実装

    「価値なし」を UI などに入れたくなかったが、入れた方が分かりやすくなりそうなので入れる。

    また、「グダグダ」の反対として「集中」を入れる。

    ListBox に「集中」が表示されないよう、Visibility が変更されるようにする。

    --------------------------------------------------------------------------------

    時間の使い方を階層的に表示し、それぞれに％表示もつけた。

    --------------------------------------------------------------------------------

    昔は完徹もちょくちょくあったが、今は翌日に響くので遅くても3時過ぎには寝る。早起きは、早くても5時くらいで、4時以前に起きることはまずない。

    そのため、12時でなく4時に「日」が変わるとみなす実装にした。

    もちろん例外も出てくるが、そもそも timeLog のデータは信頼性が低い。タスクを timeLog でスタートするのを忘れて何時間か取り組んでから「集中しているのに記録を残せない」と惜しむこともあれば、タスクがとっくに終わっているのに timeLog では切るのを忘れて半日取り組んだようになることもある。

    リストにはできるだけ正確な情報を入れ、操作をミスったならエントリーごと消し、とりあえず既存のデータを4時でぶった切って目安程度の統計情報を表示するというのが限界。

[完了] 起動時に最大化できるようにする
[完了] [8/2] taskKiller のログを更新（繰り返す）
[完了] [8/2] いったんコミット（繰り返す）
[完了] [8/2] 仮のバイナリーと設定を更新
[完了] README.md を書く
[完了] [8/7] taskKiller のログを更新（繰り返す）
[完了] アーカイブ
[完了] [8/7] いったんコミット（繰り返す）
[完了] 配置しているバイナリーを更新
[却下] 失敗や打ち切りのフラグを用意するか考える

    なかったことにした方が気分が沈まないか。

    たとえば晩飯のあと、なんとなくダラダラしたなら timeLog の記録に残らないのに、メールを書こうとしてやっぱり気乗りせずやめたなどだと「失敗」または「打ち切り」の記録が残る。そういう、自分の気分を高めない情報を積極的に扱うことはない。

[却下] 「価値なし」を「価値あまり」に変更

    あまり何なのか、日本語として微妙だが、お世話になっている人へのご挨拶のメールなどに「価値なし」のフラグを立てるのはどうしても気が進まない。

    --------------------------------------------------------------------------------

    いざやってみると「あり」と「あまり」の判別がつきにくかった。

    「価値わずか」「価値少し」なども考えたが、しっくりこなかった。

[完了] 0.1 のアーカイブを作り直す

    Nekote の開発の本格化の前に、全てのプロジェクトにおけるメモの書き方や含めるメアドなどを見直した。

[完了] キーボードやマウスの操作を検出できるようにする

    mtime には NuGet のパッケージを使っているが、バグがあるとどこかで見た記憶がある。簡単な処理なら自分で実装する。

    --------------------------------------------------------------------------------

    だいぶ前に MouseKeyHook を使った。そのプログラムは今でも動いている。2000年からのプロジェクトとのことで、それなりに信頼性もあるだろう。

    ただ、4年以上、NuGet のパッケージが更新されていない。GitHub の Issues は76個ある。事実上、放棄されたプロジェクトと考えるべき。

    NuGet Gallery | MouseKeyHook 5.6.0
    https://www.nuget.org/packages/MouseKeyHook

    gmamaladze/globalmousekeyhook: This library allows you to tap keyboard and mouse, detect and record their activity even when an application is inactive and runs in background.
    https://github.com/gmamaladze/globalmousekeyhook

    --------------------------------------------------------------------------------

    自分での実装を考えたが、きちんと作り込むと沼にハマりそう。他のアプリとの競合などが問題になるため。

    やれば数日で可能なことだからこそ、ライブラリーや「このソースコードをそのまま貼り付けてくれ」のようなものが乱立しているのだろう。だからといって、そこに自分がもう一つ加えるほどの必要性は今のところない。

    --------------------------------------------------------------------------------

    SharpHook を試す。クロスプラットフォームとのこと。libUIOHook という C 言語のライブラリーのラッパー。73 stars を獲得していて、更新がマメのようで、ドキュメントも用意されている。

    NuGet Gallery | SharpHook 2.0.0
    https://www.nuget.org/packages/SharpHook/2.0.0

    TolikPylypchuk/SharpHook: SharpHook provides a cross-platform global keyboard and mouse hook for .NET, and the ability to simulate input events
    https://github.com/TolikPylypchuk/SharpHook

    SharpHook
    https://sharphook.tolik.io/v3.1.1/

    kwhat/libuiohook: A multi-platform C library to provide global keyboard and mouse hooks from userland.
    https://github.com/kwhat/libuiohook

    --------------------------------------------------------------------------------

    他には H.Hooks というものもある。こちらもマメに更新されているようだが、ドキュメントはまだのようだ。

    NuGet Gallery | H.Hooks 1.6.0
    https://www.nuget.org/packages/H.Hooks

    HavenDV/H.Hooks: Contains LowLevelKeyboardHook and LowLevelMouseHook.
    https://github.com/HavenDV/H.Hooks

    --------------------------------------------------------------------------------

    SharpHook が良くできているようで、すぐに動き、今のところ問題も認められない。

[却下] 一時停止してパソコンを離れて戻ったときに計測を再開するか聞く

    最初にやっていたこととは別の用事でパソコンに戻ることがある。それがすぐ終わることなら計測を再開せずパッとやってしまい、またパソコンを離れるのもアリ。しばらくして、最初にやっていたことのために戻ったときに計測を再開したい。

    ただ、そういうのが過度な時間管理になる懸念もある。多少は他の用事の所要時間も混ざってよいか。

    --------------------------------------------------------------------------------

    複数インスタンスで単一のデータファイルを更新しても安全な仕様にするのも選択肢。その場合、A をやっている途中に B の方が大事になり、これらを単一のエントリーにまとめたくないとき、A を一時停止し、別のインスタンスで B をやり、B を終了し、A を再開することで正確なデータが残る。

    timeLog で時間給を請求するなら便利な機能かもしれないので、一応、想定はしてみる。

    --------------------------------------------------------------------------------

    ややこしくなるのでやめておく。

    一時停止中にそのまま寝てしまう問題については、翌朝、「あっ、これは timeLog 上で実行中のままになっていたな」と気づいてタスクの内容を整えていったん終了にしても、そのまま寝てしまったことがログに残らないようにするのがシンプル。

    「何時何分から何時何分まで」のリストを全て保存する考えがあったが、やめておく。開始日時と所要時間だけで十分。

[却下] 日をまたいだなど明らかに操作ミスのときに計測を再開するか聞く

    たとえば夜にあまり大事でもないメールを書き始め、何となくパソコンを離れ、そのまま寝たとする。

    起きて子どもを園に送ったあとパソコンをさわったときにすぐ計測が再開されるのはおかしい。

    そういうときには、「流れたみたいですが、なかったことにしますか？」を旨とするダイアログが出てほしい。

    あるいは「失敗」「打ち切り」のフラグを立てて終了も選択肢。

    --------------------------------------------------------------------------------

    なかったことにするのが良い。パソコンに向かわない時間も多い。お迎えの帰りに買い出しに寄るとか、子どもと遊ぶとかの、timeLog では管理されない膨大な時間の一部であったかのように情報として消えてしまう方が、使っていて気楽。

[完了] 複数インスタンスで単一のデータファイルにアクセスできるか調べる

    読み書きに問題はないが、そのプロセスでの統計情報が不正確になる。その点を気にしないなら、長いプログラミングの途中で短いメールを書くようなことは可能。ただ、そもそもそういうのを減らしていくのが時間管理。

[完了] TimeSpan と文字列のラウンドトリップについて調べる

    小文字の "c" のみカルチャーに依存しない。

    Standard TimeSpan format strings | Microsoft Docs
    https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-timespan-format-strings

[完了] LogInfo クラスを更新

    終了日時をなくし、ElapsedTime をコンストラクターで設定できるように。

[完了] Nekote.dll を参照

    ベタ書きで始めたプロジェクトだが、nStopwatch を Nekote 側に実装した。共通化によりデバッグ効率を高める。

[完了] 左上とその真下のグリッドの高さの比を 2:3 にする

    「自動中断」などでコントロールの行を一つ増やした。作業中に他のことも必要になって追記すると「今のタスク」の方が文字列が縦長になることも考えるなら、2:3 くらいがちょうど良い。

[完了] 数分間パソコンの操作がなければ計測を一時停止させる
[却下] 一時停止中かどうかがプログラム再起動時に復元されるようにする

    不要。カウント中にプログラムを閉じても、自動中断またはマニュアル中断による中断中にそうしても、前回の経過時間を引き継ぎ、「再開」ボタンで再開できるように。

[完了] 設計を全体的に見直す

    中断・再開、3分くらいでの自動停止、自動停止のオン・オフの切り換えなどを実装するには、既存の設計はアカンすぎる。

    自動停止しない場合、プログラムを閉じてしばらく経って開いたときに、その間の時間も計測されるべき。その間にパソコンの自動スリープ、Windows Update による再起動、電源オフなどがあっても同様。掃除をイメージ。パソコンを離れるが、戻るまで計測は続くべき。掃除が終わってからも timeLog 上で走りっぱなしにしてしまうミスは、プログラムで回避できることでない。

    自動停止する場合、つまり、パソコンでの作業の時間のみ計測する場合、プログラムがオフのときは「不明」なので計測されるべきでないし、自動スリープや再起動・電源オフの間も同様。

    デバッグモードならカウントの中断・再開などがログファイルに出力されるようにする。VSC で開いておけば、ほぼリアルタイムでリロードされる。

    iPreviousLogs なども正しい設計に。

    時間に関するところは全面的に書き直すのが良さそう。UI から完全に分離させる。

    タスクのリストのところも、1行1タスクで入力する必要性を UI で示す。コメントについては、括弧で添えるなどを推奨。

    --------------------------------------------------------------------------------

    ザッと更新した。

    プログラムが閉じられている間の計測を完全にやめた。「掃除している間に Windows Update で勝手に」のような状況は、あり得ないことでないが、極めて稀。

    自動中断を CheckBox でオフにできるように実装したが、たぶんやらない。そもそも自動中断機能を実装したのは、パソコンに戻るのを忘れての操作ミスが続いたため。「たぶん忘れるだろうなぁ」と思いながらパソコン外のタスクの所要時間をこのプログラムで計測することはほとんどない。

    デバッグモードのログ出力も不要。想定するべきパターンは限られているので、バグを落としきれる。

    iPreviousLogs なども古い設計のままでよい。ごくシンプルなプログラムを軽いノリで書いただけ。自動中断機能の実装などによりそれなりに複雑になってきているが、ゴールの見えている開発。

    タスクリストが1行1タスクだという UI の表示もなくてよい。

[完了] 休憩時などに一時停止できるようにする
[完了] カウント中に閉じようとすると確認されるようにする

    閉じるとカウントが止まるソフトになる。

[却下] lock の必要なところを探す

    軽い気持ちで lock したところデッドロックでプロセスが終わらなくなったので、むしろ timeLog 側では lock なしで問題なく動作させる方針に。

[完了] 設計の見直しが統計処理の機能に影響するか調べる

    大丈夫だった。

[完了] カウント中に Windows からログアウトできるようにする

    timeLog が原因ですぐにログアウトできなかったり、（プロセスごと止められる形で）アプリが強制終了されたりを回避。

    --------------------------------------------------------------------------------

    Closing は Windows 終了時には実行されなかった記憶がある。ドキュメントで確認する。

    --------------------------------------------------------------------------------

    If a session ends because a user logs off or shuts down, Closing is not raised とのこと。

    Window.Closing Event (System.Windows) | Microsoft Learn
    https://learn.microsoft.com/en-us/dotnet/api/system.windows.window.closing

[完了] コードを全体的に再チェック

    Nekote 側を変更するので、いろいろな部分が影響を受ける。

[完了] 前回のセッションの開始日時と経過時間のラウンドトリップをテスト

    値がない場合も。

[却下] カウントの状態が3色で区別されるようにする

    カウント前はデフォルトの UI のまま。

    カウント中は、進んでいるのだから青。

    自動中断されたら、すぐ戻れる状態なので黄色。

    ボタンで中断されたら、ガッツリ止められているので赤。

    --------------------------------------------------------------------------------

    アホっぽくなりそうなので、まだやめておく。状態の誤認によるミスが続けば実装を考える。

[完了] 出力される各ファイルの内容をチェック
[完了] mGlobalHook_KeyTyped などで例外を発生させてみるテストを行う
[完了] いったんコミット（繰り返す）
[完了] セッション情報の保存に Closed を使わないようにする

    アプリの終了と関連のあるイベントは以下の四つ。

    Window.Closing Event (System.Windows) | Microsoft Learn
    https://learn.microsoft.com/en-us/dotnet/api/system.windows.window.closing

    Window.Closed Event (System.Windows) | Microsoft Learn
    https://learn.microsoft.com/en-us/dotnet/api/system.windows.window.closed

    Application.SessionEnding Event (System.Windows) | Microsoft Learn
    https://learn.microsoft.com/en-us/dotnet/api/system.windows.application.sessionending

    Application.Exit Event (System.Windows) | Microsoft Learn
    https://learn.microsoft.com/en-us/dotnet/api/system.windows.application.exit

    --------------------------------------------------------------------------------

    Lifetime events of a WPF application - CodeProject
    https://www.codeproject.com/Articles/403418/Lifetime-events-of-a-WPF-application

    docs-desktop/application-management-overview.md at main · dotnet/docs-desktop
    https://github.com/dotnet/docs-desktop/blob/main/dotnet-desktop-guide/framework/wpf/app-development/application-management-overview.md

    --------------------------------------------------------------------------------

    MS のページによると、SessionEnding 時、つまり、Windows からのログオフやシャットダウンでは Closing が起こらないとのこと。

    MS のページにおける、何が起こって何が起こらないかに関する情報はそのくらい。

    試したところ、次のようになった。

    * アプリを終了すれば、Closing → Closed → Exit
    * 計測中でないときにセッションを終了すれば、SessionEnding → Closing → Closed
    * 計測中にセッションを終了すれば、Closing → SessionEnding

    計測中のセッション終了における Closing では、ユーザーが MessageBox に対処できない。Closing → Closed というのは一つの流れで、Closing で止まるから Closed に到達しないか。SessionEnding が Closing より遅れるのも、基準が分からない。いくつかのページでは SessionEnding 時も起こるかのように書かれている Exit が、SessionEnding が空でも起こらないのも、基準が分からない。MS のドキュメントでは SessionEnding 時には無視されるとのことである Closing が起こるのも謎。

    ちょっとググったくらいでは、はっきりとした情報は見つからなかった。

    抜けられない Closing の場合にそれが SessionEnding より先行するのは、はっきりとタイムスタンプまで出ているので間違いないとみなす。

    実装としては、次のような考え方が現実的。

    * Closing は必要に応じて途中で打ち切られるため、閉じる前の確認など、最小限の対話のみとする
    * Closed は、Closing 次第で呼ばれたり呼ばれなかったりなので、ウィンドウ関連の、なくても困らない後片付け程度にしておく
    * SessionEnding は、本来、シャットダウンを止めるためのイベントとのことだが、Exit の代わりになっている部分もある
    * データの保存などは、SessionEnding と Exit のいずれかにおいて一度だけ行われるようにする

[完了] 各メソッドでの iUpdateControls の必要性を考える
[完了] SharpHook のドキュメントに全体的に目を通す

    実装が終わってから。作法の忘れを探す。

    --------------------------------------------------------------------------------

    最初、KeyTyped で実装したが、それではカーソルキーが検出されなかった。文字が入力されないと KeyTyped は起こらない。KeyPressed への変更により解決した。

    マウスも、MouseClicked ではウィンドウのドラッグなどが検出されなかった。ドラッグ開始時にクリックが行われることも確かだが、ここでの MouseClicked は、その場でクリックされた場合のみのようだ。MousePressed への変更により解決。

    Native Functions
    https://sharphook.tolik.io/v3.1.1/articles/native.html

[完了] srcZip.txt の更新が必要か調べる

    以下の、テスト時のファイルの混入を回避。

    Compiled/timeLog.Errors.txt
    Compiled/timeLog.Session.txt
    Compiled/timeLog.Statistics.txt
    Compiled/timeLogs.txt

    --------------------------------------------------------------------------------

    SharpHook 関連の DLL としては、以下のものが入る。

    Compiled/runtimes/linux-arm/native/libuiohook.so
    Compiled/runtimes/linux-arm/native/libuiohook.so.1
    Compiled/runtimes/linux-arm/native/libuiohook.so.1.2.0
    Compiled/runtimes/linux-arm64/native/libuiohook.so
    Compiled/runtimes/linux-arm64/native/libuiohook.so.1
    Compiled/runtimes/linux-arm64/native/libuiohook.so.1.2.0
    Compiled/runtimes/linux-x64/native/libuiohook.so
    Compiled/runtimes/linux-x64/native/libuiohook.so.1
    Compiled/runtimes/linux-x64/native/libuiohook.so.1.2.0
    Compiled/runtimes/osx-arm64/native/libuiohook.1.2.0.dylib
    Compiled/runtimes/osx-arm64/native/libuiohook.1.dylib
    Compiled/runtimes/osx-arm64/native/libuiohook.dylib
    Compiled/runtimes/osx-x64/native/libuiohook.1.2.0.dylib
    Compiled/runtimes/osx-x64/native/libuiohook.1.dylib
    Compiled/runtimes/osx-x64/native/libuiohook.dylib
    Compiled/runtimes/win-arm/native/uiohook.dll
    Compiled/runtimes/win-arm64/native/uiohook.dll
    Compiled/runtimes/win-x64/native/uiohook.dll
    Compiled/runtimes/win-x86/native/uiohook.dll

    timeLog が四つの win* のうち x64 以外のどれで動くか分からないが、IDE では Any CPU でのコンパイルであり、.NET のバイナリーは現時点においては仮想マシンを必要とする中間言語的なものの認識なので、win* を四つとも残す。

    --------------------------------------------------------------------------------

    Compiled/runtimes/linux-arm
    Compiled/runtimes/linux-arm64
    Compiled/runtimes/linux-x64
    Compiled/runtimes/osx-arm64
    Compiled/runtimes/osx-x64

    の五つのサブディレクトリーを中身ごと消しても、timeLog.deps.json にはアセンブリーの情報が残る。

    不整合になるが、そもそも timeLog.deps.json がなくてもプログラムは起動するようなので、何もせずに様子見。

    --------------------------------------------------------------------------------

    MyApp.deps.json is a list of dependencies, as well as compilation context data and compilation dependencies. Not technically required, but required to use the servicing or package cache/shared package install features とのこと。

    c# - What is deps.json, and how do I make it use relative paths? - Stack Overflow
    https://stackoverflow.com/questions/40849745/what-is-deps-json-and-how-do-i-make-it-use-relative-paths

    timeLog.dll あるいは timeLog.exe にさらに別のアプリからリンクする場合に何が必要かをアプリ側が把握するためのファイルの可能性が高い。そういうリンクは今のところ想定されないため、timeLog.deps.json の内容はどうでもいい。

    消すことも考えたが、Nekote に関する情報も以下のように入っている。

    "Nekote/0.0.2.0": {
        "runtime": {
            "Nekote.dll": {
                "assemblyVersion": "0.0.2.0",
                "fileVersion": "0.0.2.0"
            }
        }
    }

    まだ黎明期の Nekote に今後、後方互換性のない更新が施されることは何度もあるだろうから、どのバージョンの Nekote を必要とするのかすぐ分かる利点に着目して一応残す。

[完了] README.md を更新
[完了] パソコンの再起動でもセッション情報が保存されるのを確認
[完了] [9/24] いったんコミット（繰り返す）
[完了] 表示の更新の頻度を高めてみるテストを行う

    Thread.Sleep の引数を0にすると、CPU のうちシングルスレッド分が使い切られる。

    1だと、リソースモニターにおいて「平均 CPU: プロセスによる % 単位での CPU の消費率の平均値（60秒あたり）」というのが0.02％で安定する。その状態で他のアプリを使っても、体感的な違いは全くない。

    100なら CPU の消費率は単純計算で0.0002％になる。

[完了] 0.2 としてアーカイブ
[完了] タスクリストのログを全体的に再チェック

    考えながら書いているので、右往左往は仕方ない。それとは関係のない、必要でない雑談などを除く。

    --------------------------------------------------------------------------------

    特に問題なし。

[完了] $"{...}" 内でのフォーマット指定の方法を調べる

    Composite formatting のところに "On {0:d}, the inventory of {1} was worth {2:C2}." という例がある。

    Overview: How to format numbers, dates, enums, and other types in .NET | Microsoft Learn
    https://learn.microsoft.com/en-us/dotnet/standard/base-types/formatting-types

    {xSeconds % 60} に D2 を指定する場合、{xSeconds % 60 :D2} のように書くことにする。60:D2 のように引っ付けると % より優先度が高いように見える。60 : D2 のように離すと正しく構文解析されず、"D2" がそのまま表示される。

    次のページにも目を通した。

    Composite formatting | Microsoft Learn
    https://learn.microsoft.com/en-us/dotnet/standard/base-types/composite-formatting

[完了] 「秒」の表示がなくならないようにする

    なくすと「10分」とかのときに計測中なのかどうかが分からない。テスト時にはそこまで使わなくて気付かず。

[却下] 状態を視覚的に分かりやすくする

    以前、アホっぽくなりそうと思ってやめた色分けを再考。一番分かりやすい。

    --------------------------------------------------------------------------------

    試したが、やはりアホっぽい。「秒」を常に表示するので一応は分かる。それで様子見。

[却下] タスクの内容が行単位で最適化される仕様を見直す

    空行やインデントを可能にすると、「1行1タスク」の前提が崩れて出力時に困る？

    --------------------------------------------------------------------------------

    そのままでよい。

[完了] ウィンドウ左側の XAML を全体的にチェック

    「結果」を追加した。

    --------------------------------------------------------------------------------

    グリッドの高さの比は適当。ウィンドウの初期状態の高さ 600px でだいたい同じくらいに見える値を選んだ。

    --------------------------------------------------------------------------------

    マージンも大丈夫そう。テストも完了。

[完了] タスクの結果を書けるようにする
[完了] 「過去ログ」のところの XAML をチェック

    「価値あり」と「グダグダ」の間の隙間を 10px に変更した。

[完了] .md を更新

    「2種類の中断」を丸ごと消した。考え方を書くところでない。なくてもユーザーが困らない情報。

[完了] いったんコミット
[完了] 0.3 としてアーカイブ
